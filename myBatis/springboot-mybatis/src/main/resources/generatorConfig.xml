<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <!-- 驱动地址 -->
    <classPathEntry location="/Users/weichanglong/.m2/repository/mysql/mysql-connector-java/5.1.39/mysql-connector-java-5.1.39.jar"/>
    <!-- context生成上下文，配置生成规则
     id：随意写
     targetRuntime：生成策略
        MyBatis3DynamicSql：默认的。会生成动态生成sql的方式（没有xml）
        MyBatis3：生成通用的查询，可以指定动态where条件
        MyBatis3Simple：只生成简单的CRUD
     -->
    <context id="simple" targetRuntime="MyBatis3Simple">

        <!-- 注释 -->
        <commentGenerator>
            <!-- 是否生成注释代时间戳 -->
            <property name="suppressDate" value="true"/>
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>

        <!-- JDBC连接 其中connectionURL后面的test改为你创建的数据库，紧跟在后面是数据库连接的账户和密码-->
<!--        ?useUnicode=true;characterEncoding=UTF-8;serverTimezone=UTC;useSSL=false-->
        <jdbcConnection
                driverClass="com.mysql.jdbc.Driver"
                connectionURL="jdbc:mysql://localhost:3306/test"
                userId="root"
                password="ai181003">
        </jdbcConnection>

        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->
        <!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和
         NUMERIC 类型解析为java.math.BigDecimal -->
        <javaTypeResolver>
            <!-- 是否使用bigDecimal， false可自动转化以下类型（Long, Integer, Short, etc.） -->
            <property name="forceBigDecimals" value="false" />
        </javaTypeResolver>

        <!-- 生成实体类POJO地址 这里需要你改动，其中targetPackage需要根据你自己创建的目录进行改动
            targetPackage：生成到哪个包下
            targetProject：生成到当前文件的那个项目目录下
         -->
        <javaModelGenerator targetPackage="com.example.springbootmybatis.pojo" targetProject="src/main/java">
            <!-- 从数据库返回的值被清理前后的空格 -->
            <property name="trimStrings" value="true" />
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false" />
        </javaModelGenerator>

        <!-- 生成mapper xml映射文件 这里不需要改动 -->
        <sqlMapGenerator targetPackage="mapper"  targetProject="src/main/resources">
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false" />
        </sqlMapGenerator>

        <!-- 生成dao接口生成规则   这里需要改动targetPackage，依据你自己的工程
            type：指定生成的方式
                1、使用注解的方式生成
                2、使用接口绑定的方式生成（要配置sqlMapGenerator）
        -->
        <javaClientGenerator targetPackage="com.example.springbootmybatis.dao" targetProject="src/main/java" type="XMLMAPPER">
            <!-- enableSubPackages:是否让schema作为包的后缀 -->
            <property name="enableSubPackages" value="false" />
        </javaClientGenerator>

        <!-- 配置哪些表需要进行代码生成
            schema：数据库名
            tableName：对应的数据库表名
            domainObjectName：要生成的实体类POJO
            mapperName：对应mapper接口的类名和mapper.xml文件名
            enable*ByExample:是否生成 example类（默认都是true）
        -->
        <table schema="test"
               tableName="emp"
               domainObjectName="Emp"
               mapperName="EmpMapper">
<!--               enableCountByExample="true"-->
<!--               enableDeleteByExample="true"-->
<!--               enableSelectByExample="true"-->
<!--               enableUpdateByExample="true">-->
        </table>
        <table schema="test"
               tableName="dept"
               domainObjectName="Dept"
               mapperName="DeptMapper">
<!--               enableCountByExample="true"-->
<!--               enableDeleteByExample="true"-->
<!--               enableSelectByExample="true"-->
<!--               enableUpdateByExample="true">-->
        </table>
    </context>
</generatorConfiguration>
